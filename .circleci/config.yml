version: 2.1

jobs:
  compile-test-using-bazel:
    resource_class: xlarge
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - run:
          name: "Build Bartleby and test"
          command: |
            echo "${BAZEL_CACHE_GCS_SA_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            echo "build --remote_cache=${BAZEL_REMOTE_CACHE_URL}" > $HOME/.bazelrc
            bazelisk test \
              --config=ci \
              ...
      - run:
          name: "Test Bazel integration"
          command: |
            git archive --format=tar.gz "${CIRCLE_BRANCH}" > /tmp/archive.tar.gz
            TMPDIR="$(mktemp -d)"
            SHA="$(sha256sum -z /tmp/archive.tar.gz |awk '{print $1}')"
            rsync -qr examples/bazel/ "${TMPDIR}/"
            sed "s/__SHA256__/${SHA}/g" tests/bazel_integration/WORKSPACE.bazel > "${TMPDIR}/WORKSPACE.bazel"
            cd "${TMPDIR}"

            echo "${BAZEL_CACHE_GCS_SA_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            echo "build --remote_cache=${BAZEL_REMOTE_CACHE_URL}" > $HOME/.bazelrc
            bazelisk build \
              --google_default_credentials \
              --remote_upload_local_results \
              --spawn_strategy standalone \
              --config=ci \
              ...

  compile-test-using-cmake:
    resource_class: xlarge
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - run:
          name: "Build Bartleby and test"
          command: |
            cmake -B build \
              -DCMAKE_C_COMPILER="${CC}" \
              -DCMAKE_CXX_COMPILER="${CXX}" \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_DIR=/usr/lib/llvm-18/lib/cmake \
              -GNinja
            cmake --build build/ "-j$(nproc)"

  compile-test-asan:
    resource_class: xlarge
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - run:
          name: "Build Bartleby and test"
          command: |
            echo "${BAZEL_CACHE_GCS_SA_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            echo "build --remote_cache=${BAZEL_REMOTE_CACHE_URL}" > $HOME/.bazelrc
            bazelisk test \
              --config asan \
              --config=ci \
              ...

  publish-doc:
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 14:ca:0e:17:4b:f0:0a:43:2c:26:b6:d0:8c:71:7e:c8
      - run:
          name: "Build and publish documentation"
          command: |
            doxygen
            export TMPDIR=$(mktemp -d)
            cd "${TMPDIR}"
            git clone -b gh-pages "${CIRCLE_REPOSITORY_URL}" .
            rsync -qr ~/project/doxygen-docs/html/ "${TMPDIR}/"
            touch .nojekyll
            git config user.email "bartleby@sandboxquantum.com"
            git config user.name "doc publisher"
            git add -A
            if [[ -z "$(git diff --staged --name-only)" ]]; then
              echo "nothing new."
              exit 0
            fi
            git commit -m 'deploying new version'
            git push

  check-format:
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - run:
          name: "Check code format using clang-format"
          command: |
            find bartleby -name '*.cpp' -exec "${CLANG_FORMAT}" --dry-run --Werror {} \;
            find bartleby -name '*.h' -exec "${CLANG_FORMAT}" --dry-run --Werror {} \;
      - run:
          name: "Run buildifier check"
          command: |
            buildifier -r -mode check .
      - run:
          name: "Run cmake-format check"
          command: |
            find . -name CMakeLists.txt -exec cmake-format --check {} \;
            find . -name '*.cmake' -exec cmake-format --check {} \;
      - run:
          name: "Run rustfmt check"
          command: |
            find . -name '*.rs' -exec rustfmt --check {} \;

  compile-test-rust:
    resource_class: xlarge
    docker:
      - image: us-central1-docker.pkg.dev/pqc-dev-pool-336002/bartleby/bartleby:ci
        auth:
          username: _json_key
          password: $DOCKER_IMAGE_GCR_SA_KEY
    steps:
      - checkout
      - run:
          name: "Build Bartleby Rust library"
          command: |
            LLVM_DIR=/usr/lib/llvm-18/lib/cmake cargo build

workflows:
  check-format:
    jobs:
      - check-format
  build-and-test:
    jobs:
      - compile-test-using-bazel
      - compile-test-using-cmake
      - compile-test-asan
      - compile-test-rust
  publish-doc:
    jobs:
      - publish-doc:
          filters:
            branches:
              only:
                - main
                - test-doc
